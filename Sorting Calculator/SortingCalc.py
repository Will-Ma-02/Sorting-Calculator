from ConsoleTools import ConsoleTools
import random, time, sys
sys.setrecursionlimit(15000)

class SortingCalculator(object):
    ALGORITHMS_IMPLEMENTED = 4

    def __init__(self) -> None:
        super().__init__()

    def print_home(self) -> None:
        s = "Sorting Calculator"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "Version: 1.0"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "Contributors: Will Ma"
        ConsoleTools.print_centered(ConsoleTools, s)
        print()
        s = "Type CMDS to see a list of commands"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "Type HELP to learn about this program"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "Type QUIT/EXIT to exit this program"
        ConsoleTools.print_centered(ConsoleTools, s)
        for i in range(6):
            print()

    def print_commands(self) -> None:
        s = "Commands"
        ConsoleTools.print_centered(ConsoleTools, s)
        print()
        s = "HOME -> Print the home page again"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "VIEWLIST -> View the current list"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "NEWLIST -> Generate a list to be sorted"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "BUBBLESORT -> Sort list using bubble sort"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "INSERTSORT -> Sort list using insertion sort"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "QUICKSORT -> Sort list using quick sort"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "MERGESORT -> Sort list using merge sort"
        ConsoleTools.print_centered(ConsoleTools, s)
        for i in range(4):
            print()

    def print_help(self) -> None:
        s = "About this program"
        ConsoleTools.print_centered(ConsoleTools, s)
        print()
        s = "This program provides an intuitive and easy way to understand how sorting algorithms work"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "by allowing the user to generate a random list of non-repeating elements and sorting them."
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "They can choose from {} different algorithms, each displaying information about how they".format(self.ALGORITHMS_IMPLEMENTED)
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "perform after sorting is completed."
        ConsoleTools.print_centered(ConsoleTools, s)
        print()
        s = "The list that will be sorted is first generated by the user. They give the size of the list,"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "which must be between 2 and 10000, and the program will generate a list of non-repeating"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "numbers in a random order. The magnitude of the numbers depends on the size of the list. For"
        ConsoleTools.print_centered(ConsoleTools, s)
        s = "Example, a list of size 1000 will have numbers between 0 and 1000."
        ConsoleTools.print_centered(ConsoleTools, s)
        print()
        s = "To go to the next page, type HELP2"
        ConsoleTools.print_centered(ConsoleTools, s)

    def print_help2(self) -> None:
        s = "COMING SOON"
        ConsoleTools.print_centered(ConsoleTools, s)
         
    def bubble_sort(self, list_in: list) -> list:
        data = []
        comparisons = 0
        swaps = 0
        start = time.time()
        for i in range(len(list_in) - 1):
            swapped = False
            for j in range(len(list_in) - i - 1):
                comparisons += 1
                if list_in[j] > list_in[j + 1]:
                    swaps += 1
                    t = list_in[j]
                    list_in[j] = list_in[j + 1]
                    list_in[j + 1] = t
                    swapped = True
            if not swapped:
                break
        end = time.time()
        data.append(comparisons)
        data.append(swaps)
        data.append(round((end - start), 2))
        return data

    def insertion_sort(self, list_in: list) -> list:
        data = []
        comparisons = 0
        swaps = 0
        start = time.time()
        j = 0
        for i in range(1, len(list_in)):
            comparisons += 1
            key = list_in[i]
            j = i - 1
            while j >= 0 and key < list_in[j]:
                comparisons += 1
                list_in[j + 1] = list_in[j]
                j = j - 1
                swaps += 1
            list_in[j + 1] = key
        end = time.time()
        data.append(comparisons)
        data.append(swaps)
        data.append(round((end - start), 2))
        return data

    def quick_sort(self, list_start: int, list_end: int, list_in: list) -> list:
        data = []
        comparisons = 0
        swaps = 0
        start = time.time()
        def split(list_start: int, list_end: int, list_in: list) -> int:
            i = list_start - 1
            pivot = list_in[list_end]
            for j in range(list_start, list_end):
                if list_in[j] <= pivot:
                    i += 1
                    list_in[i], list_in[j] = list_in[j], list_in[i]
            list_in[i + 1], list_in[list_end] = list_in[list_end], list_in[i + 1]
            return i + 1
        if list_start < list_end:
            split_point = split(list_start, list_end, list_in)
            self.quick_sort(list_start, split_point - 1, list_in)
            self.quick_sort(split_point + 1, list_end, list_in)
        end = time.time()
        data.append(comparisons)
        data.append(swaps)
        data.append(round((end - start), 2))
        return data

    def merge_sort(self, list_in: list) -> list:
        data = []
        comparisons = 0
        swaps = 0
        start = time.time()
        if len(list_in) > 1:
            middle_point = len(list_in) // 2
            left = list_in[:middle_point]
            right = list_in[middle_point:]
            self.merge_sort(left)
            self.merge_sort(right)
            i = j = k = 0
            while i < len(left) and j < len(right):
                if left[i] < right[j]:
                    list_in[k] = left[i]
                    i += 1
                else:
                    list_in[k] = right[j]
                    j += 1
                k += 1
            while i < len(left):
                list_in[k] = left[i]
                i += 1
                k += 1
            while j < len(right):
                list_in[k] = right[j]
                j += 1
                k += 1
        end = time.time()
        data.append(comparisons)
        data.append(swaps)
        data.append(round((end - start), 2))
        return data
    
    def driver(self):
        user_list = []
        reprint = True
        while True:
            if reprint:
                self.print_home()
            cmd_in = input("> ")
            if cmd_in == "QUIT" or cmd_in == "EXIT":
                s = "Goodbye"
                ConsoleTools.print_centered(ConsoleTools, s)
                exit(0)
            elif cmd_in == "CMDS":
                reprint = False
                ConsoleTools.clear_console(ConsoleTools)
                self.print_commands()
            elif cmd_in == "HELP":
                reprint = False
                ConsoleTools.clear_console(ConsoleTools)
                self.print_help()
            elif cmd_in == "HELP2":
                reprint = False
                ConsoleTools.clear_console(ConsoleTools)
                self.print_help2()
            elif cmd_in == "HOME":
                reprint = False
                ConsoleTools.clear_console(ConsoleTools)
                self.print_home()
            elif cmd_in == "VIEWLIST":
                reprint = False
                if len(user_list) == 0:
                    s = "Your list is currently empty"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                elif len(user_list) > 30:
                    l = []
                    for i in range(30):
                        l.append(user_list[i])
                    s = "To avoid overflow, only the first 30 elements are displayed:"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = str(l).replace(", ", " ")
                    ConsoleTools.print_centered(ConsoleTools, s)
                else:
                    s = str(user_list).replace(", ", " ")
                    ConsoleTools.print_centered(ConsoleTools, s)
            elif cmd_in == "NEWLIST":
                reprint = False
                s = "How many numbers? Size must be between 2 and 10,000"
                ConsoleTools.print_centered(ConsoleTools, s)
                user_in = input("> ")
                try:
                    user_in = int(user_in)
                except:
                    s = "{} is not a number, try again".format(user_in)
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                if user_in < 2 or user_in > 10000:
                    s = "Size must be between 1 and 10,000, try again"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                else:
                    user_list = []
                    s = "Generating..."
                    ConsoleTools.print_centered(ConsoleTools, s)
                    while len(user_list) != user_in:
                        rand_int = random.randint(0, user_in)
                        if rand_int not in user_list:
                            user_list.append(rand_int)
                        else:
                            continue
                    s = "Your list has been generated"
                    ConsoleTools.print_centered(ConsoleTools, s)
            elif cmd_in == "BUBBLESORT":
                reprint = False
                if len(user_list) == 0:
                    s = "An empty list can't be sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                else:
                    s = "Sorting..."
                    ConsoleTools.print_centered(ConsoleTools, s)
                    user_data = self.bubble_sort(user_list)
                    ConsoleTools.clear_console(ConsoleTools)
                    s = "The list has been sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting this list required {} comparisons".format(user_data[0])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Sorting this list required {} swaps".format(user_data[1])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    if user_data[2] < 0.1:
                        s = "Sorting this list took almost no time"
                        ConsoleTools.print_centered(ConsoleTools, s)
                    else:
                        s = "Sorting this list took {} seconds".format(user_data[2])
                        ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting algorithm used: Bubble sort"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Best case: O(n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Average case: O(n²)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Worst case: O(n²)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Overall performance: Very slow"
                    ConsoleTools.print_centered(ConsoleTools, s)
            elif cmd_in == "INSERTSORT":
                reprint = False
                if len(user_list) == 0:
                    s = "An empty list can't be sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                else:
                    s = "Sorting..."
                    ConsoleTools.print_centered(ConsoleTools, s)
                    user_data = self.insertion_sort(user_list)
                    ConsoleTools.clear_console(ConsoleTools)
                    s = "The list has been sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting this list required {} comparisons".format(user_data[0])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Sorting this list required {} swaps".format(user_data[1])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    if user_data[2] < 0.1:
                        s = "Sorting this list took almost no time"
                        ConsoleTools.print_centered(ConsoleTools, s)
                    else:
                        s = "Sorting this list took {} seconds".format(user_data[2])
                        ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting algorithm used: Insertion sort"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Best case: O(n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Average case: O(n²)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Worst case: O(n²)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Overall performance: Slow"
                    ConsoleTools.print_centered(ConsoleTools, s)
            elif cmd_in == "QUICKSORT":
                reprint = False
                if len(user_list) == 0:
                    s = "An empty list can't be sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                else:
                    s = "Sorting..."
                    ConsoleTools.print_centered(ConsoleTools, s)
                    user_data = self.quick_sort(0, len(user_list) - 1, user_list)
                    ConsoleTools.clear_console(ConsoleTools)
                    s = "The list has been sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting this list required {} comparisons".format(user_data[0])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Sorting this list required {} swaps".format(user_data[1])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    if user_data[2] < 0.1:
                        s = "Sorting this list took almost no time"
                        ConsoleTools.print_centered(ConsoleTools, s)
                    else:
                        s = "Sorting this list took {} seconds".format(user_data[2])
                        ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting algorithm used: Quick sort"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Best case: O(n log n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Average case: O(n log n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Worst case: O(n²)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Overall performance: Fast"
                    ConsoleTools.print_centered(ConsoleTools, s)
            elif cmd_in == "MERGESORT":
                reprint = False
                if len(user_list) == 0:
                    s = "An empty list can't be sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    continue
                else:
                    s = "Sorting..."
                    ConsoleTools.print_centered(ConsoleTools, s)
                    user_data = self.merge_sort(user_list)
                    ConsoleTools.clear_console(ConsoleTools)
                    s = "The list has been sorted"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting this list required {} comparisons".format(user_data[0])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Sorting this list required {} swaps".format(user_data[1])
                    ConsoleTools.print_centered(ConsoleTools, s)
                    if user_data[2] < 0.1:
                        s = "Sorting this list took almost no time"
                        ConsoleTools.print_centered(ConsoleTools, s)
                    else:
                        s = "Sorting this list took {} seconds".format(user_data[2])
                        ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Sorting algorithm used: Merge sort"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Best case: O(n log n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Average case: O(n log n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    s = "Worst case: O(n log n)"
                    ConsoleTools.print_centered(ConsoleTools, s)
                    print()
                    s = "Overall performance: Very fast"
                    ConsoleTools.print_centered(ConsoleTools, s)        
            else:
                reprint = False
                s = "Command {} not found, try again".format(cmd_in)
                ConsoleTools.print_centered(ConsoleTools, s)

if __name__ == '__main__':
    calculator = SortingCalculator()
    calculator.driver()
